import logging
from typing import Dict
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

from algorithm.place_finder import PlaceFinder
from config.config import BOT_TOKEN, DB_CONFIG

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logging.basicConfig(
    filename="logs/bot.log",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
finder = PlaceFinder(DB_CONFIG)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SELECT_TYPE, GET_LOCATION = range(2)

# –¢–∏–ø—ã –º–µ—Å—Ç
place_types = {
    "‚òï –ö–∞—Ñ–µ": "cafe",
    "üè• –ê–ø—Ç–µ–∫–∞": "pharmacy",
}

user_choice: Dict[int, str] = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [[KeyboardButton(text=t)] for t in place_types]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ß—Ç–æ –∏—â–µ–º?", reply_markup=markup)
    return SELECT_TYPE

async def select_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text not in place_types:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return SELECT_TYPE
    user_choice[update.effective_user.id] = place_types[text]
    loc_btn = KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    markup = ReplyKeyboardMarkup([[loc_btn]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.", reply_markup=markup)
    return GET_LOCATION

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_choice:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞: /start")
        return ConversationHandler.END

    place_type = user_choice[user_id]
    loc = update.message.location
    try:
        result = finder.find_optimal_location((loc.latitude, loc.longitude), place_type)
        if not result:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–æ—á–∫—É üòî")
        else:
            label, lat, lon, (ulat, ulon) = result
            gmap_link = f"https://www.google.com/maps?q={lat},{lon}"
            await update.message.reply_text(
                f"üìç *{label}*\n"
                f"üåê [–û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps]({gmap_link})",
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_type)],
            GET_LOCATION: [MessageHandler(filters.LOCATION, handle_location)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(conv)
    logger.info("üöÄ Bot started and running...")
    app.run_polling()